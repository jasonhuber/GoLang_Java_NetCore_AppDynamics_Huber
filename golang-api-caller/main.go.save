package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"bytes"
   	"log"
	appd "appdynamics"
)

type Response struct {
	Name         string `json:"name"`
        Manufacturer string `json:"manufacturer"`
        ID           string `json:"id"`
        InPark       string `json:"inPark"`
        Height       int    `json:"height"`
}

func main() {

	cfg := appd.Config{}  
	cfg.AppName = "GoLangExample"
	cfg.TierName = "APICaller"
	cfg.NodeName = "ApiCaller1"
	cfg.Controller.Host = "freedomfinancialnetwork-nonprod.saas.appdynamics.com"
	cfg.Controller.Port = 443
	cfg.Controller.UseSSL = true
	cfg.Controller.Account = "freedomfinancialnetwork-nonprod"
	cfg.Controller.AccessKey = "5pcf62m23b0f"
	cfg.InitTimeoutMs = 1000  // Wait up to 1s for initialization to finish
		
	if err := appd.InitSDK(&cfg); err != nil {
    		fmt.Printf("Error initializing the AppDynamics SDK\n")
	} else {
    		fmt.Printf("Initialized AppDynamics SDK successfully\n")
	}


	for {
		btHandle := appd.StartBT("Setting Coasters - main", "")
		addcoaster()
		addcoaster()
		getcoasters()
	}
	}
	}

	// end the transaction

}

func getcoasters() {
        btHandle2 := appd.StartBT("getting Coasters", "")

	fmt.Println("Calling API...")

	client := &http.Client{}
	req, err := http.NewRequest("GET", "http://192.168.86.246:9090", nil)
	if err != nil {
		fmt.Print(err.Error())
	}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Content-Type", "application/json")
	resp, err := client.Do(req)

	defer resp.Body.Close()
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Print(err.Error())
	}

	var responseObject Response
	json.Unmarshal(bodyBytes, &responseObject)
	fmt.Printf("API Response as struct %+v\n", responseObject)
 	appd.EndBT(btHandle2)
}

func addcoaster() {

	//Encode the data
   	postBody, _ := json.Marshal(map[string]string{
      		"id":  "Toby",
      		"name": "Toby@example.com",
		"manufacturer": "jaosn",
		"inPark": "yes it is",
   	})
   	responseBody := bytes.NewBuffer(postBody)
	
	//Leverage Go's HTTP Post function to make request
   	resp, err := http.Post("http://192.168.86.246:9090/coasters", "application/json", responseBody)
	
	//Handle Error
	if err != nil {
      		log.Fatalf("An Error Occured %v", err)
   	}
   	
	defer resp.Body.Close()

	//Read the response body
   	body, err := ioutil.ReadAll(resp.Body)
   	if err != nil {
      		log.Fatalln(err)
   	}
   	sb := string(body)
   	log.Printf(sb)
}
